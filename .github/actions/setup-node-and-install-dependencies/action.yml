name: Setup
description: Install node and package manager via volta, then install dependencies

inputs:
  main-branch-name:
    description: ''
    required: false
    default: main
  node-version:
    description: 'Version Spec of the node version to use. Examples: 16.15.x, 16.15.0, >=16.15.0'
    required: false
    default: '16.15.x'
  npm-version:
    description: 'Version Spec of the npm version to use. Examples: 8.11.x, 8.11.0, >=8.11.0'
    required: false
    default: '8.11.x'
  yarn-version:
    description: 'Version Spec of the yarn version to use. Examples: 1.22.x, 1.22.0, >=1.22.0'
    required: false
    default: '1.22.x'
  pnpm-version:
    description: 'Version Spec of the pnpm version to use. Examples: 8.3.x, 8.3.0, >=8.3.0'
    required: false
    default: '8.3.x'
  registry-url:
    description: 'Optional registry to set up for auth. Will set the registry in a project level .npmrc file, and set up auth to read in from env.NODE_AUTH_TOKEN'
    required: false
  scope:
    description: 'Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).'
    required: false

runs:
  using: composite
  steps:
    - name: Checkout [Pull Request]
      uses: actions/checkout@v3
      if: ${{ github.event_name == 'pull_request' }}
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: Checkout [Default Branch]
      uses: actions/checkout@v3
      if: ${{ github.event_name != 'pull_request' }}
      with:
        fetch-depth: 0

    - name: Derive appropriate SHAs for base and head for `nx affected` commands
      uses: nrwl/nx-set-shas@v3
      with:
        main-branch-name: ${{ inputs.main-branch-name }}

    - name: Setup git user to "ðŸ¤– Github Bot"
      run: git config user.email "-" && git config user.name "ðŸ¤– Github Bot"
      shell: bash

    - name: Detect package manager
      id: package_manager
      run: |
        echo "name=$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")" >> $GITHUB_OUTPUT
      shell: bash

    # Set node/npm/yarn versions using volta, with optional overrides provided by the consumer
    - uses: volta-cli/action@v4
      with:
        node-version: ${{ inputs.node-version }}
        npm-version: ${{ inputs.npm-version }}
        yarn-version: ${{ inputs.yarn-version }}
        registry-url: ${{ inputs.registry-url }}
        scope: ${{ inputs.scope }}

    # Install pnpm with exact version provided by the consumer of fallback to latest version
    - name: Install PNPM
      if: steps.package_manager.outputs.name == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: ${{ inputs.pnpm-version || 'latest' }}

    - name: Print node/npm/yarn versions
      id: versions
      run: |
        node_ver=$( node --version )
        yarn_ver=$( yarn --version || true )
        pnpm_ver=$( pnpm --version || true )

        echo "Node: ${node_ver:1}"
        echo "NPM: $( npm --version )"
        if [[ $yarn_ver != "" ]]; then echo "Yarn: $yarn_ver"; fi
        if [[ $pnpm_ver != "" ]]; then echo "PNPM: $pnpm_ver"; fi

        echo "node_version=${node_ver:1}" >> $GITHUB_OUTPUT
        echo "yarn_version=${yarn_ver:1}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Use the node_modules cache if available [npm]
      if: steps.package_manager.outputs.name == 'npm'
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

    - name: Get pnpm cache directory path
      if: steps.package_manager.outputs.name == 'pnpm'
      id: pnpm-cache-dir-path
      run: echo "dir=$(pnpm store path)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Use the node_modules cache if available [pnpm]
      if: steps.package_manager.outputs.name == 'pnpm'
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

    - name: Get yarn cache directory path [yarn 1.x]
      if: steps.package_manager.outputs.name == 'yarn' && startsWith(steps.versions.outputs.yarn_version, '1.')
      id: yarn-cache-dir-path
      run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Use the node_modules cache if available [yarn 1.x]
      if: steps.package_manager.outputs.name == 'yarn' && startsWith(steps.versions.outputs.yarn_version, '1.')
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-

    - name: Get yarn cache directory path [yarn berry]
      if: steps.package_manager.outputs.name == 'yarn' && !startsWith(steps.versions.outputs.yarn_version, '1.')
      id: yarn-berry-cache-dir-path
      run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      shell: bash

    - name: Use the node_modules cache if available [yarn berry]
      if: steps.package_manager.outputs.name == 'yarn' && !startsWith(steps.versions.outputs.yarn_version, '1.')
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-berry-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-berry-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-berry-

    - name: Install dependencies
      run: |
        if [[ "${{ steps.package_manager.outputs.name == 'yarn' }}" == "true" ]]; then
          if [ "${{ startsWith(steps.versions.outputs.yarn_version, '1.') }}" == "true" ]; then
            echo "Running yarn install --frozen-lockfile"
            yarn install --frozen-lockfile
          else
            echo "Running yarn install --immutable"
            yarn install --immutable
          fi
        elif [ "${{ steps.package_manager.outputs.name == 'pnpm' }}" == "true" ]; then
          echo "Running pnpm install --frozen-lockfile"
          pnpm install --frozen-lockfile
        else
          echo "Running npm ci"
          npm ci
        fi
      shell: bash
